<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Yi's Blog - Do. Or do not. There is no try</title><link href="http://www.yilaguan.cc/" rel="alternate"></link><link href="http://www.yilaguan.cc/feeds/reading.atom.xml" rel="self"></link><id>http://www.yilaguan.cc/</id><updated>2016-10-26T00:00:00+08:00</updated><entry><title>vim</title><link href="http://www.yilaguan.cc/posts/2016/10/26/vim.html" rel="alternate"></link><published>2016-10-26T00:00:00+08:00</published><author><name>YiHan</name></author><id>tag:www.yilaguan.cc,2016-10-26:posts/2016/10/26/vim.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               第一講小結


  1. 光標在屏幕文本中的移動既可以用箭頭鍵，也可以使用 hjkl 字母鍵。
         h (左移)       j (下行)       k (上行)     l (右移)

  2. 欲進入vim編輯器(從命令行提示符)，請輸入︰vim 文件名 &amp;lt;回車&amp;gt;

  3. 欲退出vim編輯器，請輸入以下命令放棄所有修改︰

        &amp;lt;ESC&amp;gt;   :q!      &amp;lt;回車&amp;gt;

     或者輸入以下命令保存所有修改︰

        &amp;lt;ESC&amp;gt;   :wq      &amp;lt;回車&amp;gt;

  4. 在正常模式下刪除光標所在位置的字符，請按︰ x

  5. 在正常模式下要在光標所在位置開始插入文本，請按︰

         i     輸入必要文本     &amp;lt;ESC&amp;gt;

特別提示︰按下 &amp;lt;ESC&amp;gt; 鍵會帶您回到正常模式或者取消一個不期望或者部分完成
的命令。

好了，第一講到此結束。下面接下來繼續第二講的內容。


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               第二讲小结


  1. 欲从当前光标删除至下一个单词，请输入：dw
  2. 欲从当前光标删除至当前行末尾，请输入：d$
  3. 欲删除整行，请输入：dd

  4. 欲重复一个动作，请在它前面加上一个数字：2w
  5. 在正常模式下修改命令的格式是：
               operator   [number]   motion
     其中：
       operator - 操作符，代表要做的事情，比如 d 代表删除
       [number] - 可以附加的数字，代表动作重复的次数
       motion   - 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)，
                  $ 代表行末等等。

  6. 欲移动光标到行首，请按数字0键：0

  7. 欲撤消以前的操作，请输入：u (小写的u)
     欲撤消在一行中所做的改动，请输入：U (大写的U)
     欲撤消以前的撤消命令，恢复以前的操作结果，请输入：CTRL-R

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                  第三讲小结


  1. 要重新置入已经删除的文本内容，请按小写字母 p 键。该操作可以将已删除
     的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置
     于当前光标所在行的下一行。

  2. 要替换光标所在位置的字符，请输入小写的 r 和要替换掉原位置字符的新字
     符即可。

  3. 更改类命令允许您改变从当前光标所在位置直到动作指示的位置中间的文本。
     比如输入 ce 可以替换当前光标到单词的末尾的内容；输入 c$ 可以替换当
     前光标到行末的内容。

  4. 更改类命令的格式是：

         c   [number]   motion

现在我们继续学习下一讲。



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               第四讲小结


  1. CTRL-G 用于显示当前光标所在位置和文件状态信息。
     G 用于将光标跳转至文件最后一行。
     先敲入一个行号然后输入大写 G 则是将光标移动至该行号代表的行。
     gg 用于将光标跳转至文件第一行。

  2. 输入 / 然后紧随一个字符串是在当前所编辑的文档中正向查找该字符串。
     输入 ? 然后紧随一个字符串则是在当前所编辑的文档中反向查找该字符串。
     完成一次查找之后按 n 键是重复上一次的命令，可在同一方向上查
     找下一个匹配字符串所在；或者按大写 N 向相反方向查找下一匹配字符串所在。
     CTRL-O 带您跳转回较旧的位置，CTRL-I 则带您到较新的位置。

  3. 如果光标当前位置是括号(、)、[、]、{、}，按 % 会将光标移动到配对的括号上。

  4. 在一行内替换头一个字符串 old 为新的字符串 new，请输入  :s/old/new
     在一行内替换所有的字符串 old 为新的字符串 new，请输入  :s/old/new/g
     在两行内替换所有的字符串 old 为新的字符串 new，请输入  :#,#s/old/new/g
     在文件内替换所有的字符串 old 为新的字符串 new，请输入  :%s/old/new/g
     进行全文替换时询问用户确认每个替换需添加 c 标志        :%s/old/new/gc

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               第五讲小结


  1. :!command 用于执行一个外部命令 command。

     请看一些实际例子：
         (MS-DOS)         (Unix)
          :!dir            :!ls            -  用于显示当前目录的内容。
          :!del FILENAME   :!rm FILENAME   -  用于删除名为 FILENAME 的文件。

  2. :w FILENAME  可将当前 VIM 中正在编辑的文件保存到名为 FILENAME 的文
     件中。

  3. v motion :w FILENAME 可将当前编辑文件中可视模式下选中的内容保存到文件
     FILENAME 中。

  4. :r FILENAME 可提取磁盘文件 FILENAME 并将其插入到当前文件的光标位置
     后面。

  5. :r !dir 可以读取 dir 命令的输出并将其放置到当前文件的光标位置后面。


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               第六讲小结

  1. 输入小写的 o 可以在光标下方打开新的一行并进入插入模式。
     输入大写的 O 可以在光标上方打开新的一行。

  2. 输入小写的 a 可以在光标所在位置之后插入文本。
     输入大写的 A 可以在光标所在行的行末之后插入文本。

  3. e 命令可以使光标移动到单词末尾。

  4. 操作符 y 复制文本，p 粘贴先前复制的文本。

  5. 输入大写的 R 将进入替换模式，直至按 &amp;lt;ESC&amp;gt; 键回到正常模式。

  6. 输入 :set xxx 可以设置 xxx 选项。一些有用的选项如下：
        &amp;#39;ic&amp;#39; &amp;#39;ignorecase&amp;#39;       查找时忽略字母大小写
        &amp;#39;is&amp;#39; &amp;#39;incsearch&amp;#39;        查找短语时显示部分匹配
        &amp;#39;hls&amp;#39; &amp;#39;hlsearch&amp;#39;        高亮显示所有的匹配短语
     选项名可以用完整版本，也可以用缩略版本。

  7. 在选项前加上 no 可以关闭选项：  :set noic

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                  第七讲小结


  1. 输入 :help 或者按 &amp;lt;F1&amp;gt; 键或 &amp;lt;Help&amp;gt; 键可以打开帮助窗口。

  2. 输入 :help cmd 可以找到关于 cmd 命令的帮助。

  3. 输入 CTRL-W CTRL-W  可以使您在窗口之间跳转。

  4. 输入 :q 以关闭帮助窗口

  5. 您可以创建一个 vimrc 启动脚本文件用来保存您偏好的设置。

  6. 请确保 Vim 不是在以兼容模式运行： :set nocp 当输入 : 命令时，按 CTRL-D 可以查看可能的补全结果。
     按 &amp;lt;TAB&amp;gt; 可以使用一个补全。







~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&lt;/pre&gt;&lt;/div&gt;</summary><category term="vim"></category></entry><entry><title>重构_改善既有代码的设计</title><link href="http://www.yilaguan.cc/posts/2015/11/24/zhong-gou-_gai-shan-ji-you-dai-ma-de-she-ji.html" rel="alternate"></link><published>2015-11-24T00:00:00+08:00</published><author><name>YiHan</name></author><id>tag:www.yilaguan.cc,2015-11-24:posts/2015/11/24/zhong-gou-_gai-shan-ji-you-dai-ma-de-she-ji.html</id><summary type="html">&lt;h2&gt;第一章 重构、第一个案例&lt;/h2&gt;
&lt;h3&gt;Tips&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果你发现自己需要为程序添加一个特性，而代码结构使你无法很方便地达成目的，那就先重构那个程序，是特性的添加比较容易进行，然后再添加特性&lt;/li&gt;
&lt;li&gt;先看看有没有一套OK的测试机制，这些测试要有自我检测能力&lt;/li&gt;
&lt;li&gt;尽量干掉一些临时变量，但是需要考虑性能问题&lt;/li&gt;
&lt;li&gt;函数应该放在它所使用的数据的所属对象内&lt;/li&gt;
&lt;li&gt;考虑使用多态来替换那些if else, switch case - State 模式&lt;/li&gt;
&lt;li&gt;测试、小修改、测试、小修改、测试、小修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;该重构时就重构，自动化测试是前提，提炼函数，临时变量，switch case，变量名是重点
但是自动化测试一般没有，怎么破？&lt;/p&gt;
&lt;h2&gt;第二章 重构原则&lt;/h2&gt;
&lt;h3&gt;正文&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对软件内部结构的一种调整， 目的是在不改变软件可观查行为的前提下，提高其可理解性，降低其修改成本&lt;/li&gt;
&lt;li&gt;使用一系列重构手法， 在不改变软件可观察行为的前提下，调整其结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为何重构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改进软件设计， 软件结构会流失， 重构维持其现有形态&lt;/li&gt;
&lt;li&gt;让软件更易理解&lt;/li&gt;
&lt;li&gt;帮助找到bug&lt;/li&gt;
&lt;li&gt;提高编程速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;何时重构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一次就去做吧，第二次会不爽，忍忍， 第三次就重构吧&lt;/li&gt;
&lt;li&gt;添加功能时，如果发现不能轻松的添加你想要的功能，那就先重构他，然后再添加新功能&lt;/li&gt;
&lt;li&gt;代码复审时重构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;怎么跟经理说&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;质量驱动 - 提&lt;/li&gt;
&lt;li&gt;进度驱动 - 不提，直接重构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;重构为什么有用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;现状&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;难以阅读，难以修改&lt;/li&gt;
&lt;li&gt;逻辑重复，难以修改&lt;/li&gt;
&lt;li&gt;添加新逻辑，修改现有代码，难以修改&lt;/li&gt;
&lt;li&gt;复杂逻辑条件，难以修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容易阅读&lt;/li&gt;
&lt;li&gt;所有逻辑都只在唯一地点指定&lt;/li&gt;
&lt;li&gt;新的改动不会危及现有逻辑&lt;/li&gt;
&lt;li&gt;尽可能简单表达条件逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;间接层与重构&lt;/h3&gt;
&lt;p&gt;计算机是这样一门科学：它相信所有问题都可以通过增加一个间接层来解决，一顿还是两顿烧烤？&lt;/p&gt;
&lt;p&gt;重构很多时候就是在增加间接层，大对象拆分成小对象，大函数拆成小函数
优点：
- 允许逻辑共享
- 分开解释意图和实现&lt;br /&gt;
    - 其实就是给函数或者类取个好名字
- 隔离变化
- 封装条件逻辑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重构 VS 事前设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;代码的坏味道&lt;/h2&gt;
&lt;p&gt;什么时候需要重构呢？？
代码改动困难，牵一发而动全身时，一个相同处理逻辑遍地都是的时候，就重构吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复代码&lt;ul&gt;
&lt;li&gt;重复代码永远是一个警告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;过长函数&lt;/li&gt;
&lt;li&gt;过大的类&lt;/li&gt;
&lt;li&gt;过长的参数列表&lt;/li&gt;
&lt;li&gt;发散式变化&lt;ul&gt;
&lt;li&gt;一个类收到多种情况变化的影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;散弹式修改&lt;ul&gt;
&lt;li&gt;一个变化引发多个类相应修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依恋情结&lt;ul&gt;
&lt;li&gt;一个函数过度依赖于另外一个对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据泥团&lt;ul&gt;
&lt;li&gt;让有关联关系的数据组成一个对象，在对象内部进行一些处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本类型偏执&lt;ul&gt;
&lt;li&gt;不要介意使用一些小的类，比如数值和币种的money类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Switch&lt;ul&gt;
&lt;li&gt;使用多态，状态类，子类继承等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;平行继承体系&lt;ul&gt;
&lt;li&gt;干掉引用端的继承体系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;冗余类&lt;ul&gt;
&lt;li&gt;inline class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;夸夸奇谈未来性&lt;ul&gt;
&lt;li&gt;需求实现不用太过超前&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;令人迷惑的暂时字段-class fileds&lt;ul&gt;
&lt;li&gt;将字段和与之相关的计算独立出来，作为一个新的函数对象维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;过度耦合的消息链条&lt;ul&gt;
&lt;li&gt;用函数替代对象链条&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中间人 【过度委托】&lt;/li&gt;
&lt;li&gt;类过于亲密&lt;/li&gt;
&lt;li&gt;异曲同工的类&lt;/li&gt;
&lt;li&gt;不完美的库类&lt;/li&gt;
&lt;li&gt;纯粹的数据类&lt;/li&gt;
&lt;li&gt;被拒绝的馈赠&lt;ul&gt;
&lt;li&gt;基类继承了过多的父类的实现，这个一般可以接受，如果不愿意实现父类的接口，就注意是否要继续继承，可以考虑是否要修改继承关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;过多的注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;构筑测试体系&lt;/h2&gt;
&lt;p&gt;可靠的测试体系是重构的前提。&lt;/p&gt;
&lt;h2&gt;写在最后&lt;/h2&gt;
&lt;p&gt;这本书后面部分大部分是一些具体的重构手法，会快速过一下，就不再笔记了。  &lt;/p&gt;
&lt;p&gt;最大的收获莫过于减少了对重构的顾虑，更加重视自动测试体系，开始在EBS plsql开发的过程使用自动测试。&lt;br /&gt;
开发过程中虽然多花了一些时间编写自动测试脚本，但是一旦编写完成，修改一点代码就可以很快的进行一次批量测试，对开发速度的提升还是很明显的。  &lt;/p&gt;
&lt;p&gt;有了测试体系，该重构时就重构吧。&lt;/p&gt;</summary><category term="Reading"></category><category term="Refactoring"></category></entry></feed>